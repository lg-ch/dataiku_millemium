# Generating 100 additional validated Tanium question examples (IDs 42-141), saving to CSV.
import pandas as pd
from pathlib import Path
import json

additional = [
    {"id":42, "natural_language":"Quels hôtes ont une TPM présente et activée ?", "tanium_question":"Get TPM Present, TPM Activated from all machines", "intent":"hardware", "entities":json.dumps({}), "difficulty":"simple", "notes":"TPM sensors (may vary by OS)"},
    {"id":43, "natural_language":"Quels certificats TLS ont une date d'expiration dans les 30 prochains jours ?", "tanium_question":"Get Certificate Subject, Certificate Expiration Date, Certificate Path from all machines where Certificate Expiration Date <= now + 30d", "intent":"security", "entities":json.dumps({"time_window_days":30}), "difficulty":"advanced", "notes":"Certificate inventory sensor required"},
    {"id":44, "natural_language":"Liste des machines avec BitLocker activé", "tanium_question":"Get BitLocker Status from all machines where BitLocker Status = \"On\"", "intent":"security", "entities":json.dumps({}), "difficulty":"simple", "notes":"BitLocker status sensor (Windows)"},
    {"id":45, "natural_language":"Quels hôtes ont le SMBv1 activé ?", "tanium_question":"Get SMBv1 Enabled from all machines where SMBv1 Enabled = True", "intent":"network_security", "entities":json.dumps({}), "difficulty":"simple", "notes":"SMB version sensors"},
    {"id":46, "natural_language":"Quels partages SMB sont accessibles anonymement ?", "tanium_question":"Get SMB Shares, Share Permissions from all machines where Share Permissions contains \"Everyone\" or Share Permissions contains \"Anonymous\"", "intent":"network", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Share enumeration sensors; be cautious with scope"},
    {"id":47, "natural_language":"Quels postes ont des ports RPC ouverts (135) ?", "tanium_question":"Get Listening Ports, Process Name from all machines where Listening Ports contains 135", "intent":"network", "entities":json.dumps({"port":135}), "difficulty":"simple", "notes":"Listening Ports sensor"},
    {"id":48, "natural_language":"Machines dont le driver réseau a des erreurs (interface down) récemment", "tanium_question":"Get Network Adapter Name, Adapter State, Error Count from all machines where Error Count > 0", "intent":"network", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Adapter telemetry may be vendor-specific"},
    {"id":49, "natural_language":"Quel est l'état du service Windows Update sur tous les postes ?", "tanium_question":"Get Service Name, Service State from all machines where Service Name = \"wuauserv\"", "intent":"patch", "entities":json.dumps({"service":"wuauserv"}), "difficulty":"simple", "notes":"Standard service query"},
    {"id":50, "natural_language":"Quelles machines ont un dump mémoire (memory.dmp) dans C:\\Windows ?", "tanium_question":"Get File Name, File Path from all machines where File Path = \"C:\\\\Windows\\\\memory.dmp\"", "intent":"forensic", "entities":json.dumps({"path":"C:\\Windows\\memory.dmp"}), "difficulty":"simple", "notes":"File search for crash dumps"},
    {"id":51, "natural_language":"Quel est le pourcentage d'utilisation du disque C: par machine ?", "tanium_question":"Get Disk Usage (C:), Free Space (C:) from all machines", "intent":"telemetry", "entities":json.dumps({"drive":"C:"}), "difficulty":"simple", "notes":"Disk usage sensors"},
    {"id":52, "natural_language":"Liste des machines avec plus de 90% d'utilisation CPU moyenne sur 15 minutes", "tanium_question":"Get Average CPU Usage (15m), Computer Name from all machines where Average CPU Usage (15m) > 90", "intent":"performance", "entities":json.dumps({"cpu_threshold":90}), "difficulty":"advanced", "notes":"Requires performance aggregation sensors"},
    {"id":53, "natural_language":"Quels hôtes possèdent le client SCCM installé ?", "tanium_question":"Get Installed Applications, Version from all machines where Installed Applications contains \"Configuration Manager\" or Installed Applications contains \"SCCM\" or Installed Applications contains \"SMS\"", "intent":"inventory", "entities":json.dumps({}), "difficulty":"simple", "notes":"Installed Applications sensor"},
    {"id":54, "natural_language":"Quel est le répertoire d'installation de Java et sa version ?", "tanium_question":"Get Installed Applications, Version, Install Path from all machines where Installed Applications contains \"Java\" or Installed Applications contains \"JRE\" or Installed Applications contains \"JDK\"", "intent":"inventory", "entities":json.dumps({"software":"Java"}), "difficulty":"simple", "notes":"Installed Applications sensor"},
    {"id":55, "natural_language":"Quelles machines ont le port 22 ouvert et le service SSH en écoute ?", "tanium_question":"Get Listening Ports, Process Name from all machines where Listening Ports contains 22", "intent":"network", "entities":json.dumps({"port":22}), "difficulty":"simple", "notes":"Useful for Linux/macOS endpoints"},
    {"id":56, "natural_language":"Machines avec versions de Chrome/Firefox dépassées (exemple older than X)", "tanium_question":"Get Installed Applications, Version from all machines where Installed Applications contains \"Google Chrome\" and Version < \"100.0.0\"", "intent":"patch", "entities":json.dumps({"browser":"Chrome","version_threshold":"100.0.0"}), "difficulty":"advanced", "notes":"String version comparison may need normalization"},
    {"id":57, "natural_language":"Quels ordinateurs ont des périphériques USB connectés ?", "tanium_question":"Get USB Devices, Device ID, Mount Path from all machines where USB Devices exists", "intent":"hardware", "entities":json.dumps({}), "difficulty":"simple", "notes":"USB enumeration sensor"},
    {"id":58, "natural_language":"Quels périphériques USB ont été connectés au cours des 7 derniers jours ?", "tanium_question":"Get USB Device Name, First Seen Time from all machines where First Seen Time >= now - 7d", "intent":"forensic", "entities":json.dumps({"time_window_days":7}), "difficulty":"advanced", "notes":"USB event timeline sensor required"},
    {"id":59, "natural_language":"Machines avec imprimantes installées et drivers associés", "tanium_question":"Get Installed Printers, Printer Driver from all machines", "intent":"inventory", "entities":json.dumps({}), "difficulty":"simple", "notes":"Printer sensors"},
    {"id":60, "natural_language":"Liste des clés LAPS et état de rotation", "tanium_question":"Get LAPS Password Expires, LAPS Managed from all machines where LAPS Managed = True", "intent":"identity", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Requires LAPS integration"},
    {"id":61, "natural_language":"Quels hôtes ont une session RDP active ?", "tanium_question":"Get Logged On Users, Session Type from all machines where Session Type = \"RDP\"", "intent":"user", "entities":json.dumps({}), "difficulty":"simple", "notes":"Session type sensor"),
    {"id":62, "natural_language":"Quelles machines ont des services qui démarrent automatiquement mais sont arrêtés ?", "tanium_question":"Get Service Name, Startup Type, Service State from all machines where Startup Type = \"Automatic\" and Service State = \"Stopped\"", "intent":"services", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Service state and startup type sensors"},
    {"id":63, "natural_language":"Quels hôtes ont des pilotes signés numériquement non valides ?", "tanium_question":"Get Driver Name, Driver Path, Digital Signature Status from all machines where Digital Signature Status != \"Valid\"", "intent":"security", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Driver signature sensor availability varies"},
    {"id":64, "natural_language":"Machines avec des comptes invités activés localement", "tanium_question":"Get Local Accounts, Account Status from all machines where Local Accounts contains \"Guest\" and Account Status = \"Enabled\"", "intent":"identity", "entities":json.dumps({}), "difficulty":"simple", "notes":"Local accounts sensor"},
    {"id":65, "natural_language":"Quels postes ont des règles de pare-feu autorisant le trafic entrant sur le port 1433 ?", "tanium_question":"Get Firewall Rules, Rule Action, Local Ports from all machines where Local Ports contains 1433 and Rule Action = \"Allow\"", "intent":"network_security", "entities":json.dumps({"port":1433}), "difficulty":"advanced", "notes":"Firewall rule sensors"},
    {"id":66, "natural_language":"Liste des machines où la mise à jour de l'AV a échoué récemment", "tanium_question":"Get Antivirus Product, Last Update Time, Last Update Status from all machines where Last Update Status = \"Failed\" and Last Update Time >= now - 7d", "intent":"security", "entities":json.dumps({"time_window_days":7}), "difficulty":"advanced", "notes":"AV integration sensors"},
    {"id":67, "natural_language":"Quelles machines ont des processus avec injection de DLL (modules non standards chargés) ?", "tanium_question":"Get Process Name, PID, Loaded Modules from all machines where Loaded Modules contains \"unusual_module.dll\" or Loaded Modules contains \"suspicious\"", "intent":"process", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Loaded modules sensor; match against known suspicious modules"),
    {"id":68, "natural_language":"Quels hôtes ont des partitions en erreur SMART (disque dégradé) ?", "tanium_question":"Get SMART Status, Disk Model, Disk Serial from all machines where SMART Status != \"OK\"", "intent":"hardware", "entities":json.dumps({}), "difficulty":"advanced", "notes":"SMART sensor for disk health"},
    {"id":69, "natural_language":"Machines avec profils itinérants dépassant X Mo", "tanium_question":"Get User Profile Size, User Name from all machines where User Profile Size > 1024 MB", "intent":"storage", "entities":json.dumps({"size_mb":1024}), "difficulty":"advanced", "notes":"Profile size sensor"},
    {"id":70, "natural_language":"Quels hôtes ont des tâches planifiées désactivées récemment ?", "tanium_question":"Get Scheduled Task Name, Task State, Last Run Time from all machines where Task State = \"Disabled\" and Last Run Time >= now - 7d", "intent":"scheduled_task", "entities":json.dumps({"time_window_days":7}), "difficulty":"advanced", "notes":"Scheduled task telemetry"},
    {"id":71, "natural_language":"Quelles machines possèdent la variable d'environnement PATH contenant des chemins non standards (ex: C:\\Temp) ?", "tanium_question":"Get Environment Variables from all machines where PATH contains \"C:\\\\Temp\" or PATH contains \"%TEMP%\"", "intent":"configuration", "entities":json.dumps({"path_fragment":"C:\\Temp"}), "difficulty":"advanced", "notes":"Environment variable sensor"},
    {"id":72, "natural_language":"Quel est le statut de Secure Boot sur les machines ?", "tanium_question":"Get Secure Boot State from all machines", "intent":"security", "entities":json.dumps({}), "difficulty":"simple", "notes":"Secure Boot sensor"},
    {"id":73, "natural_language":"Combien d'utilisateurs uniques se sont connectés au cours des 30 derniers jours par machine ?", "tanium_question":"Get Unique Logged On Users (30d), Computer Name from all machines where Timestamp >= now - 30d", "intent":"audit", "entities":json.dumps({"time_window_days":30}), "difficulty":"advanced", "notes":"Requires aggregation/unique count sensor"},
    {"id":74, "natural_language":"Machines avec le client Jamf installé (macOS)", "tanium_question":"Get Installed Applications, Version from all machines where Installed Applications contains \"jamf\"", "intent":"inventory", "entities":json.dumps({"software":"jamf"}), "difficulty":"simple", "notes":"macOS specific sensors"},
    {"id":75, "natural_language":"Quels hôtes ont une politique GPO non appliquée (erreur) ?", "tanium_question":"Get Group Policy Result, Last Group Policy Error from all machines where Last Group Policy Error exists", "intent":"configuration", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Group Policy result sensor"},
    {"id":76, "natural_language":"Liste des contrôleurs de domaine visibles par les clients", "tanium_question":"Get Domain Controller, DC IP from all machines where Domain Controller exists", "intent":"network", "entities":json.dumps({}), "difficulty":"simple", "notes":"Domain controller discovery sensor"},
    {"id":77, "natural_language":"Quelles machines ont l'option 'AllowRemoteRPC' activée ?", "tanium_question":"Get Registry Value \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\LanmanServer\\\\Parameters\\\\AllowRemoteRPC\" from all machines", "intent":"registry", "entities":json.dumps({"registry_path":"HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\AllowRemoteRPC"}), "difficulty":"advanced", "notes":"Specific registry key sensor"},
    {"id":78, "natural_language":"Quels hôtes ont des certificats auto-signés installés ?", "tanium_question":"Get Certificate Subject, Issuer, Certificate Thumbprint from all machines where Issuer = Subject", "intent":"security", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Certificate sensor; issuer==subject indicates self-signed"},
    {"id":79, "natural_language":"Machines avec des fichiers .ssh/authorized_keys contenant des clés non reconnues", "tanium_question":"Get File Name, File Path, File Content from all machines where File Path matches \"/home/*/.ssh/authorized_keys\" and File Content contains \"ssh-rsa\"", "intent":"forensic", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Unix path example; content search can be sensitive"},
    {"id":80, "natural_language":"Liste des jobs cron contenant des commandes 'curl' ou 'wget'", "tanium_question":"Get Cron Jobs, Command from all machines where Command contains \"curl\" or Command contains \"wget\"", "intent":"scheduled_task", "entities":json.dumps({"keywords":["curl","wget"]}), "difficulty":"advanced", "notes":"Unix cron job sensor"},
    {"id":81, "natural_language":"Quels hôtes ont des connexions VPN actives ?", "tanium_question":"Get Network Connections, Connection Type, Remote Address from all machines where Connection Type = \"VPN\" and Connection State = \"Established\"", "intent":"network", "entities":json.dumps({}), "difficulty":"advanced", "notes":"VPN connection telemetry"},
    {"id":82, "natural_language":"Quels services Windows se sont arrêtés avec un code d'erreur non nul au cours des 24 dernières heures ?", "tanium_question":"Get Service Name, Service Exit Code, Last Stop Time from all machines where Last Stop Time >= now - 24h and Service Exit Code != 0", "intent":"services", "entities":json.dumps({"time_window_hours":24}), "difficulty":"advanced", "notes":"Service exit codes and timestamps"},
    {"id":83, "natural_language":"Quelles machines ont le kernel panic / BSOD récent (minidump présent) ?", "tanium_question":"Get File Name, File Path, Last Modified Time from all machines where File Path contains \"minidump\" and Last Modified Time >= now - 7d", "intent":"forensic", "entities":json.dumps({"time_window_days":7}), "difficulty":"advanced", "notes":"Crash dump detection"},
    {"id":84, "natural_language":"Quel est le niveau d'alerte Windows Defender et la dernière signature ?", "tanium_question":"Get Windows Defender Status, Antivirus Definitions Version, Last Scan Time from all machines", "intent":"security", "entities":json.dumps({}), "difficulty":"simple", "notes":"Windows Defender sensors"},
    {"id":85, "natural_language":"Liste des modules noyau chargés (drivers) par machine", "tanium_question":"Get Kernel Modules, Module Path from all machines", "intent":"process", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Kernel module listing sensor"},
    {"id":86, "natural_language":"Quelles machines ont des règles sudoers modifiées récemment ?", "tanium_question":"Get File Name, File Path, Last Modified Time from all machines where File Path = \"/etc/sudoers\" and Last Modified Time >= now - 7d", "intent":"configuration", "entities":json.dumps({"path":"/etc/sudoers","time_window_days":7}), "difficulty":"advanced", "notes":"Unix sudoers monitoring"},
    {"id":87, "natural_language":"Quels hôtes ont Docker installé et quelles images locales sont présentes ?", "tanium_question":"Get Docker Daemon Status, Installed Images from all machines where Installed Applications contains \"Docker\" or Docker Daemon Status = \"Running\"", "intent":"inventory", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Docker sensors"},
    {"id":88, "natural_language":"Machines avec certificats expirés (date passée)", "tanium_question":"Get Certificate Subject, Certificate Expiration Date from all machines where Certificate Expiration Date < now", "intent":"security", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Certificate expiry detection"},
    {"id":89, "natural_language":"Quels hôtes acceptent des connexions Telnet (port 23) ?", "tanium_question":"Get Listening Ports, Process Name from all machines where Listening Ports contains 23", "intent":"network", "entities":json.dumps({"port":23}), "difficulty":"simple", "notes":"Telnet exposure detection"},
    {"id":90, "natural_language":"Machines avec le service WinRM activé", "tanium_question":"Get Service Name, Service State from all machines where Service Name = \"WinRM\" and Service State = \"Running\"", "intent":"management", "entities":json.dumps({}), "difficulty":"simple", "notes":"WinRM service query"},
    {"id":91, "natural_language":"Quels fichiers temporaires (.tmp) dépassent 100 MB ?", "tanium_question":"Get File Name, File Path, File Size from all machines where File Name matches \"*.tmp\" and File Size > 100 MB", "intent":"storage", "entities":json.dumps({"size_mb":100}), "difficulty":"advanced", "notes":"File search and size filter"},
    {"id":92, "natural_language":"Quelles machines possèdent un lecteur BitLocker sans clé de récupération enregistrée ?", "tanium_question":"Get BitLocker Drive Status, Recovery Key Escrowed from all machines where BitLocker Drive Status = \"On\" and Recovery Key Escrowed = False", "intent":"security", "entities":json.dumps({}), "difficulty":"advanced", "notes":"BitLocker recovery status sensor"},
    {"id":93, "natural_language":"Liste des comptes de service locaux créés dans les 30 derniers jours", "tanium_question":"Get Local Accounts, Creation Time from all machines where Creation Time >= now - 30d and Account Type = \"Service\"", "intent":"identity", "entities":json.dumps({"time_window_days":30}), "difficulty":"advanced", "notes":"Account creation telemetry"},
    {"id":94, "natural_language":"Quels hôtes ont des bibliothèques Python obsolètes (version < 2.7) installées ?", "tanium_question":"Get Installed Python Packages, Version from all machines where Installed Python Packages contains \"python\" and Version < \"2.7\"", "intent":"inventory", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Python package inventory"),
    {"id":95, "natural_language":"Machines avec VM guest additions manquantes (ex: VirtualBox Guest Additions)", "tanium_question":"Get Installed Applications, Version from all machines where Installed Applications contains \"VirtualBox Guest Additions\" or Installed Applications does not contain \"VirtualBox Guest Additions\"", "intent":"inventory", "entities":json.dumps({}), "difficulty":"advanced", "notes":"You can flip the contains/does not contain depending on query intent"},
    {"id":96, "natural_language":"Quels postes ont des certificats racine non approuvés installés ?", "tanium_question":"Get Certificate Subject, Issuer, Store Location from all machines where Store Location = \"Trusted Root\" and Issuer not in Trusted Root List", "intent":"security", "entities":json.dumps({}), "difficulty":"advanced", "notes":"Requires trusted root list reference"},
    {"id":97, "natural_language":"Quelles machines ont des fichiers avec l'extens
